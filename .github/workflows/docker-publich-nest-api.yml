# .github/workflows/docker-publish-web.yml
name: Build, Test, and Push clarte-api Docker Image

# This should use a optional postgres image to test, using the tiny fr dicktionary

on:
  push:
    branches: [main]
    paths:
      - 'apps/clarte-api/**'
      - 'packages/clarte-dto/**'
      - '.github/workflows/docker-publish-nest-api.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-test-push-api:
    runs-on: ubuntu-latest

    # Grant permissions for GITHUB_TOKEN to push to GHCR
    permissions:
      contents: read # Needed to checkout the code
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Extract metadata (like tags and labels) for the Docker image
      #    This helps create meaningful tags automatically
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/clarte-api
          tags: |
            type=sha 
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build the API Docker image and LOAD it locally
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true # Load the image into the runner's local Docker daemon
          file: ./apps/clarte-api/Dockerfile
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the 'meta' step
          labels: ${{ steps.meta.outputs.labels }}

      # 6. Run Smoke Test with Temporary Database
      - name: Run smoke test with temporary database

        run: |
          echo "Current directory:"
          pwd
          echo "--- Listing root directory (repository root):"
          ls -la .
          echo "--- Listing ./apps/ directory:"
          ls -la ./apps/
          echo "--- Listing ./apps/clarte-api/ directory:"
          ls -la ./apps/clarte-api/

          TEST_NETWORK_NAME="clarte-test-net"
          TEST_DB_CONTAINER_NAME="clarte"
          TEST_API_CONTAINER_NAME="test-api"
          TEST_DB_USER="bitravage"
          TEST_DB_PASSWORD="693721"
          TEST_DB_NAME="clarte"
          TEST_IMAGE_TAG="ghcr.io/amirzhou/clarte-api:${{ steps.meta.outputs.version }}"
          LISTENING_PORT=9999
          API_TEST_ENDPOINT="http://localhost:${LISTENING_PORT}/ipa-symbols/all"

          echo "Creating Docker network ${TEST_NETWORK_NAME}..."
          docker network create ${TEST_NETWORK_NAME}

          echo "Starting temporary Postgres container (${TEST_DB_CONTAINER_NAME})..."
          docker run -d \
            --name ${TEST_DB_CONTAINER_NAME} \
            --network ${TEST_NETWORK_NAME} \
            -e POSTGRES_USER=${TEST_DB_USER} \
            -e POSTGRES_PASSWORD=${TEST_DB_PASSWORD} \
            -e POSTGRES_DB=${TEST_DB_NAME} \
            postgres:15-alpine 

          echo "Waiting for Postgres to initialize..."
          sleep 15

          echo "Running database migrations..."
          echo "--- Checking /app/apps/clarte-api/node_modules/typeorm/cli.js ---";
          ls -la /app/apps/clarte-api/node_modules/typeorm/cli.js || echo "Not found in /app/apps/clarte-api/node_modules/typeorm";


          echo "Attempting to use image tag: >>>${TEST_IMAGE_TAG}<<<"
          docker run --rm \
            --network ${TEST_NETWORK_NAME} \
            -e DB_HOST=${TEST_DB_CONTAINER_NAME} \
            -e DB_PORT=5432 \
            -e DB_USERNAME=${TEST_DB_USER} \
            -e DB_PASSWORD=${TEST_DB_PASSWORD} \
            -e DB_DATABASE=${TEST_DB_NAME} \
            "${TEST_IMAGE_TAG}" \
            node ./app/apps/clarte-api/node_modules/typeorm/cli.js migration:run -d dist/datasources/postgresLocalDatasource.js

          echo "Starting API container (${TEST_API_CONTAINER_NAME}) on image ${TEST_IMAGE_TAG}..."
          docker run -d \
            --name ${TEST_API_CONTAINER_NAME} \
            --network ${TEST_NETWORK_NAME} \
            -p ${LISTENING_PORT}:${LISTENING_PORT} \
            -e DB_HOST=${TEST_DB_CONTAINER_NAME} \
            -e DB_PORT=5432 \
            -e DB_USERNAME=${TEST_DB_USER} \
            -e DB_PASSWORD=${TEST_DB_PASSWORD} \
            -e DB_DATABASE=${TEST_DB_NAME} \
            -e NODE_ENV=test \
            -e LISTENING_PORT=${LISTENING_PORT}
            "${TEST_IMAGE_TAG}"

          echo "Waiting for API to start..."
          sleep 25 

          echo "Attempting to curl ${API_TEST_ENDPOINT}..."
          curl --fail ${API_TEST_ENDPOINT} || (docker logs ${TEST_API_CONTAINER_NAME} && docker logs ${TEST_DB_CONTAINER_NAME} && echo "Smoke test failed!" && exit 1)

          echo "Smoke test passed!"

      - name: clean up test containers nad network
        if: always()
        run: |
          echo "Cleaning up containers"
          TEST_API_CONTAINER_NAME="test-api"
          TEST_DB_CONTAINER_NAME="clarte" 
          TEST_NETWORK_NAME="clarte-test-net"
          docker stop ${TEST_API_CONTAINER_NAME} ${TEST_DB_CONTAINER_NAME} || true
          docker rm ${TEST_API_CONTAINER_NAME} ${TEST_DB_CONTAINER_NAME} || true
          echo "Removing Docker network..."
          docker network rm ${TEST_NETWORK_NAME} || true

      - name: Push Docker image
        run: |
          echo "Pushing tags: ${{ steps.meta.outputs.tags }}"
          docker push --all-tags ghcr.io/amirzhou/clarte-api
